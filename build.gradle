plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.21.1'
    id("maven-publish")

}

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))


afterEvaluate { project ->
    publishing {
        repositories {
            maven {
                name="DesktopAssistant"
                println(githubProperties['grp.user'])
                println(githubProperties['grp.key'])
                url = uri("https://maven.pkg.github.com/nickrexrode/desktopassistant")
                credentials {
                    username = githubProperties['grp.user'] ?: System.getenv("GITHUB_USERNAME")
                    password = githubProperties['grp.key'] ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                groupId = 'com.nickrexrode'
                artifactId = 'desktopassistant'
                version = '0.1.2.1'
                from(components.java)
            }
        }
    }
}
sourceCompatibility = "11"
targetCompatibility = "11"

javafx {
    version = 14
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base']
//    sdk = System.getenv('PATH_TO_FX')
//    if (sdk ==null || sdk.isBlank()) {
//        throw new InvalidUserDataException("PATH_TO_FX env variable is not set")
//    }
    application {
        def javafxHome = System.getenv("PATH_TO_FX")
        mainClassName = 'com.nickrexrode.DesktopAssistant'
        applicationName = 'DesktopAssistant'
        applicationDefaultJvmArgs = [
                "--module-path=${javafxHome}",
                '--add-modules=javafx.controls,javafx.fxml,javafx.graphics,javafx.fxml'
        ]
        println("applicationDefaultJvmArgs:" + applicationDefaultJvmArgs)
    }
}

mainClassName = 'com.nickrexrode.DesktopAssistant'
jar {
    from 'resources', {
        into 'resources'
    }
}
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'DesktopAssistant'
    }

    jpackage {
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
    }
}
repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url =uri("https://jitpack.io")
    }
    jcenter()
}
//jar {
//    manifest {
//        attributes 'Main-Class': 'com.nickrexrode.DesktopAssistant'
//    }
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}
dependencies {

//    implementation group: 'edu.cmu.sphinx', name: 'sphinx4-core', version:'5prealpha-SNAPSHOT'
//    implementation group: 'edu.cmu.sphinx', name: 'sphinx4-data', version:'5prealpha-SNAPSHOT'
//    compile group: 'org.jvoicexml', name: 'cmu_us_kal', version: '1.2.3-SNAPSHOT'
//    compile group: 'org.jvoicexml', name: 'cmu_time_awb', version: '1.2.3-SNAPSHOT'

//    implementation "org.openjfx:javafx-base:15.0.1:${platform}"
//    implementation "org.openjfx:javafx-controls:15.0.1:${platform}"
//    implementation "org.openjfx:javafx-graphics:15.0.1:${platform}"
//    implementation "org.openjfx:javafx-fxml:15.0.1:${platform}"

//    implementation('org.controlsfx:controlsfx:11.0.3') {
//        exclude group: 'org.openjfx'
//    }
//    implementation 'org.hamcrest.hamcrest-all:1.1'

//    def withExcludes = {
//        exclude group: 'org.hamcrest', module: 'hamcrest.core'
//    }

    // compile "org.hamcrest:hamcrest-core:2.1"
//    compile 'com.googlecode.json-simple:json-simple:1.1.1', withExcludes
//     {
//        exclude group: "org.hamcrest", module: 'hamcrest.core'
//    }
    //implementation(group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1")
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation('org.yaml:snakeyaml:1.29')
}
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': "1",
                'Main-Class': 'com.nickrexrode.Loader'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

application {
    mainModule = 'com.nickrexrode.DesktopAssistant'
    mainClass = 'com.nickrexrode.Loader'
}

